using Sitecrawler.Core.Interface;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using HtmlAgilityPack;
using Crawler.Data.DbContext;
using System.Text.RegularExpressions;
using Crawler.DTO.ResponseDTO;

namespace Sitecrawler.Core.Code
{
    public class dogdripCrawler : commonCrawler
    {
        private readonly int _perpage = 20;
        protected override int perpage { get { return _perpage; } }
        protected override List<ContentDTO> GetContentsPerPage(int page)
        {
            List<ContentDTO> contentList = new List<ContentDTO>();
            try
            {
                //개드립
                var dogdrip = webGetutf.Load("http://www.dogdrip.net/dogdrip");

                var dogdrip_ul = dogdrip.DocumentNode.SelectNodes("//ul[@class= 'lt']").FirstOrDefault();
                var articles = dogdrip_ul.Descendants("li");

                foreach (var dogdrip_li in articles)
                {
                    var anchortag = dogdrip_li.ChildNodes.SingleOrDefault(c => c.Name.Equals("a"));
                    var titlenode = anchortag.SelectSingleNode("./span[@class='title']");
                    //var authnode = anchortag.SelectSingleNode("./span[@class='auth']");

                    //댓글 갯수
                    titlenode.SelectSingleNode("./em").Remove();

                    //buildobject;
                    contentList.Add(new ContentDTO
                    {
                        Crawled = DateTime.Now,
                        Contents_URL = anchortag.GetAttributeValue("href", "undefined"),
                        Article = titlenode.InnerText.Trim(),
                        Url_Params = (new Uri(anchortag.GetAttributeValue("href", "undefined")).Query),
                    });
                }
                return contentList;
            }
            catch (Exception e)
            {
                return null;
            }
        }
        protected override void ParseContent(ContentDTO content)
        {
            var loadedContent = webGetutf.Load(content.Contents_URL);
            try
            {

                //var content_count = 0;
                List<string> details = new List<string>();
                var articlecontent = loadedContent.DocumentNode.SelectNodes("//div[@id = 'article_1']").FirstOrDefault();
                content.Details = articlecontent.InnerText.Trim();
                content.Details_Html = articlecontent.InnerHtml.Trim();
                content.isDepricate = false;

                var imgnodes = articlecontent.SelectNodes(".//img");

                content.SrcDatas = new List<SrcdataDTO>();
                if (imgnodes == null) return;

                foreach (var img in imgnodes)
                {
                    var srcurl = new Uri(img.GetAttributeValue("src", "default"));
                    var sourceurl = srcurl.AbsoluteUri;
                    var filnemae = System.IO.Path.GetFileName(srcurl.LocalPath);

                    var srcdata = new SrcdataDTO
                    {
                        SourceUrl = srcurl.AbsoluteUri,
                        IsDepricated = false,
                        FileName = System.IO.Path.GetFileName(srcurl.LocalPath),
                        SrcGuId = Guid.NewGuid(),
                    };
                    img.SetAttributeValue("guid", srcdata.SrcGuId.ToString());

                    content.SrcDatas.Add(srcdata);
                }
            }
            catch (Exception e)
            {
                Console.WriteLine("ReStart");
                ParseContent(content);
            }
        }
    }
}
