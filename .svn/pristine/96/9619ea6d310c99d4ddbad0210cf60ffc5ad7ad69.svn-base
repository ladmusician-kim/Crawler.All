using Crawler.DTO.RequestDTO;
using Crawler.DTO.ResponseDTO;
using HtmlAgilityPack;
using ServiceStack.ServiceClient.Web;
using Sitecrawler.Core.Interface;
using System.Collections.Generic;
using System.Text;
using System;
using System.Text.RegularExpressions;
using System.Net;
using System.Threading.Tasks;
using System.Linq;

namespace Sitecrawler.Core.Code
{
    public abstract class commonCrawler : ICrawler
    {
        JsonServiceClient client;
        protected SnapshotDTO Snapshot;

        public commonCrawler()
        {
            try
            {
                client = new JsonServiceClient("http://localhost:61910");
            }
            catch (Exception e)
            {

            }
        }
        
        protected abstract int perpage { get;}
        
        public void GetList(int count)
        {
            var pagecount = (int)((count - 1) / perpage);

            var dic = new Dictionary<int, List<ContentDTO>>();

            Parallel.For(1, pagecount + 2, i =>
            {
                var list = GetContentsPerPage(i);
                Console.WriteLine(list == null);
                dic.Add(i, list);
            });

            var orderedlist = dic.OrderBy(d => d.Key);
            var finallist = new List<ContentDTO>();

            foreach (var eachList in orderedlist)
            {
                finallist.AddRange(eachList.Value);
            }

            Snapshot = new SnapshotDTO
            {
                Contents = finallist.Take(count).ToList(),

            };
        }
        protected abstract List<ContentDTO> GetContentsPerPage(int page);

        public void ParseArticles()
        {
            if(Snapshot.Contents != null)
            {
                Parallel.ForEach(Snapshot.Contents, content =>
                {
                    ParseContent(content);
                    CacheImage(content);
                });
            }
        }
        protected abstract void ParseContent(ContentDTO content);

        protected void CacheImage(ContentDTO content)
        {
            try
            {
                Parallel.ForEach(content.SrcDatas, srcdata =>
                {
                    var client = new WebClient();
                    //System.Console.WriteLine(content.Contents_URL);
                    client.Headers.Add("Referer",content.Contents_URL);
                    var data = client.DownloadData(srcdata.SourceUrl);

                    srcdata.OriginalPayload = data;
                });
            }
            catch (WebException wex)
            {
                if (((HttpWebResponse)wex.Response).StatusCode == HttpStatusCode.NotFound)
                {
                    // error 404, do what you need to do
                }
            }
        }

        //공통으로 쓰이는 변수
        public HtmlWeb webGetkr = new HtmlWeb
        {
            UserAgent = "Mozilla/5.0 (iPhone; U; CPU iPhone OS 4_3_2 like Mac OS X; en-us) AppleWebKit/533.17.9 (KHTML, like Gecko) Version/5.0.2 Mobile/8H7 Safari/6533.18.5",
            OverrideEncoding = Encoding.GetEncoding("euc-kr")
        };
        
        public HtmlWeb webGetutf = new HtmlWeb
        {
            UserAgent = "Mozilla/5.0 (iPhone; U; CPU iPhone OS 4_3_2 like Mac OS X; en-us) AppleWebKit/533.17.9 (KHTML, like Gecko) Version/5.0.2 Mobile/8H7 Safari/6533.18.5",
            OverrideEncoding = Encoding.GetEncoding("UTF-8")
        };
        
        //Icrawler 에서 상속받은 부분
       
    }
}
