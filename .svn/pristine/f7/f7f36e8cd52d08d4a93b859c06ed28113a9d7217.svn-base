using Crawler.Data.DbContext;
using Crawler.DTO.RequestDTO;
using Crawler.DTO.ResponseDTO;
using ServiceStack.ServiceClient.Web;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;

namespace Crawler.API.ServiceCode
{
    public partial class CrawlerService : ServiceBase
    {
        public EnvelopeDTO<SnapshotDTO> Any(SnapshotGetSnapshotRequestDTO req)
        {
            var snapshotId = req.SnapshotId;

            var snapshot = (from s in context.Snapshots
                            where s.Id == snapshotId
                            select new SnapshotDTO
                            {
                                Id = s.Id,
                                TimePeriod = new TimePeriodDTO{
                                    Id = s.TimePeriod.Id,
                                    Label = s.TimePeriod.Label,
                                    Scheduled = s.TimePeriod.Scheduled,
                                    Crawled = s.TimePeriod.Crawled
                                },
                                Taken = s.Taken,
                                Board = new BoardDTO{
                                    Id = s.Board.Id,
                                    Label = s.Board.Label,
                                    Website = new WebsiteDTO
                                    {
                                        Id = s.Board.Website.Id,
                                        Label = s.Board.Website.Label,
                                        Mobile_URL = s.Board.Website.Mobile_URL,
                                        Website_URL = s.Board.Website.Website_URL
                                    },
                                },
                                SnapshotToContent = (from sc in s.SnapshotToContent
                                                     orderby sc.Seqno
                                                     let c = sc.Content
                                                     select new SnapshotToContentDTO{
                                                         Content = new ContentDTO
                                                         {
                                                             Id = c.Id,
                                                             Article = c.Article,
                                                             Crawled = c.Crawled,
                                                             Details = c.Details,
                                                         }
                                                     }).ToList()
                            }).SingleOrDefault();

            return Succeeded(snapshot);
        }

        public EnvelopeDTO<GenericDummyDTO> Any(SnapshotCreateRequestDTO req)
        {
            var Snapshot = req.Snapshot;
            using (var entities = new CrawlerStorage())
            {
                try
                {
                    var snapshot = new Snapshot();

                    snapshot.For_Timeperiod = Snapshot.For_Timeperiod;
                    snapshot.Taken = Snapshot.Taken;
                    snapshot.For_BoardId = Snapshot.For_BoardId;
                    
                    entities.Snapshots.Add(snapshot);

                    int contentseq = 0;

                    foreach (var snapshotscontent in Snapshot.Contents)
                    {
                        var content = new Content();
                        content.For_BoardId = snapshotscontent.For_BoardId;
                        content.Contents_URL = snapshotscontent.Contents_URL;
                        content.Article = snapshotscontent.Article;
                        content.Crawled = snapshotscontent.Crawled;
                        content.Details = snapshotscontent.Details;
                        content.Details_Html = snapshotscontent.Details_Html;
                        content.ContentGuId = Guid.NewGuid();

                        contentseq++;

                        entities.Contents.Add(content);

                        foreach (var data in snapshotscontent.SrcDatas)
                        {
                            var srcdata = new Srcdata();

                            srcdata.SrcGuId = Guid.NewGuid();
                            srcdata.Src = data.Src;
                            srcdata.Content = content;

                            entities.Srcdatas.Add(srcdata);
                        }

                        var snapshotTocontent = new SnapshotToContent();
                        snapshotTocontent.Content = content;
                        snapshotTocontent.Snapshot = snapshot;
                        snapshotTocontent.Seqno = contentseq;
                        entities.SnapshotToContents.Add(snapshotTocontent);
                    }

                    entities.SaveChanges();

                    return Succeeded(new GenericDummyDTO ());
                }

                catch (System.Data.Entity.Validation.DbEntityValidationException dbEx)
                {
                    Exception raise = dbEx;
                    foreach (var validationErrors in dbEx.EntityValidationErrors)
                    {
                        foreach (var validationError in validationErrors.ValidationErrors)
                        {
                            string message = string.Format("{0}:{1}",
                                validationErrors.Entry.Entity.ToString(),
                                validationError.ErrorMessage);
                            raise = new InvalidOperationException(message, raise);
                        }
                    }
                    throw raise;
                }
            }
        }
    }
}