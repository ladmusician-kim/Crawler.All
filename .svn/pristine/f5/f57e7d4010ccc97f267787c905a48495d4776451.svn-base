using Crawler.Data.DbContext;
using Crawler.DTO.RequestDTO;
using Crawler.DTO.ResponseDTO;
using ServiceStack.ServiceClient.Web;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;

namespace Crawler.API.ServiceCode
{
    public partial class CrawlerService : ServiceBase
    {
        public EnvelopeDTO<SnapshotToContentDTO> Any(SnapshotToContentCreateRequestDTO req)
        {
            var In_WebsiteId = req.In_WebsiteId;
            var For_SnapshotId = req.For_SnapshotId;
            var Has_contentid = req.Has_ContentId;
            var Seqno = req.Seqno;
            
            using (var entities = new CrawlerStorage())
            {
                try
                {
                    var snapshotTocontent = new SnapshotToContent();

                    snapshotTocontent.For_SnapshotId = For_SnapshotId;
                    snapshotTocontent.In_WebsiteId = In_WebsiteId;
                    snapshotTocontent.Has_ContentId = Has_contentid;
                    snapshotTocontent.Seqno = Seqno;

                    entities.SnapshotToContents.Add(snapshotTocontent);

                    entities.SaveChanges();

                    return Succeeded(new SnapshotToContentDTO { For_SnapshotId = snapshotTocontent.For_SnapshotId, In_WebsiteId = snapshotTocontent.In_WebsiteId, Has_ContentId = snapshotTocontent.Has_ContentId, Seqno = snapshotTocontent.Seqno });
                }
                catch (Exception e)
                {
                    return Fail<SnapshotToContentDTO>("SnapshotToContentCreateRequestDTO : Exception - " + e.Message);
                }
            }
        }
        public EnvelopeDTO<SnapshotToContentDTO> Any(SnapshotToContentGetbyIdRequestDTO req)
        {
            var For_SnapshotId = req.For_SnapshotId;
            var In_WebsiteId = req.In_WebsiteId;
            var Has_ContentId = req.Has_ContentId;

            if (For_SnapshotId== null || In_WebsiteId== null || Has_ContentId == null)
            {
                if (For_SnapshotId == null && In_WebsiteId == null && Has_ContentId == null)
                {
                    return Fail<SnapshotToContentDTO>("SnapshotToContentGetbyIdRequestDTO: parameter 'CategoryId & TextbookId' is empty.");
                }
                if (For_SnapshotId == null && In_WebsiteId != null && Has_ContentId != null)
                {
                    return Fail<SnapshotToContentDTO>("SnapshotToContentGetbyIdRequestDTO : parameter 'For_SnapshotId' is empty.");
                }
                if (For_SnapshotId != null && In_WebsiteId == null && Has_ContentId != null)
                {
                    return Fail<SnapshotToContentDTO>("SnapshotToContentGetbyIdRequestDTO : parameter 'In_WebsiteId' is empty.");
                }
                if (For_SnapshotId != null && In_WebsiteId != null && Has_ContentId == null)
                {
                    return Fail<SnapshotToContentDTO>("SnapshotToContentGetbyIdRequestDTO : parameter 'Has_ContentId' is empty.");
                }
                if (For_SnapshotId == null && In_WebsiteId == null && Has_ContentId != null)
                {
                    return Fail<SnapshotToContentDTO>("SnapshotToContentGetbyIdRequestDTO : parameter 'For_SnapshotId' & 'In_WebsiteId' is empty.");
                }
                if (For_SnapshotId != null && In_WebsiteId == null && Has_ContentId == null)
                {
                    return Fail<SnapshotToContentDTO>("SnapshotToContentGetbyIdRequestDTO : parameter 'In_WebsiteId ' & 'Has_ContentId' is empty.");
                }
                if (For_SnapshotId == null && In_WebsiteId != null && Has_ContentId == null)
                {
                    return Fail<SnapshotToContentDTO>("SnapshotToContentGetbyIdRequestDTO : parameter 'For_SnapshotId ' & 'Has_ContentId' is empty.");
                }
                if (For_SnapshotId == null && In_WebsiteId != null && Has_ContentId == null)
                {
                    return Fail<SnapshotToContentDTO>("SnapshotToContentGetbyIdRequestDTO : parameter 'For_SnapshotId ' & 'In_WebsiteId' & 'Has_ContentId' is empty.");
                }
            }
            
            using (var entities = new CrawlerStorage())
            {
                try
                {
                    var snapshotTocontent = (from s in entities.SnapshotToContents
                                             where s.For_SnapshotId == For_SnapshotId && s.In_WebsiteId == In_WebsiteId && s.Has_ContentId == Has_ContentId
                                             select new SnapshotToContentDTO
                                                {
                                                    For_SnapshotId = s.For_SnapshotId,
                                                    In_WebsiteId = s.In_WebsiteId,
                                                    Has_ContentId = s.Has_ContentId,
                                                    Seqno = s.Seqno
                                                }).SingleOrDefault();

                    if (snapshotTocontent == null)
                    {
                        return Fail<SnapshotToContentDTO>("SnapshotToContentGetbyIdRequestDTO : Website matching given 'snapshotTocontent' does not exist.");
                    }

                    return Succeeded(snapshotTocontent);
                }

                catch (Exception e)
                {
                    return Fail<SnapshotToContentDTO>("SnapshotToContentGetbyIdRequestDTO : Exception - " + e.Message);
                }
            }
        }
    }
}