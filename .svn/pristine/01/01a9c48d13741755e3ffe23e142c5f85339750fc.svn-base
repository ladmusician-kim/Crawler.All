using Crawler.Data.DbContext;
using Crawler.DTO.RequestDTO;
using Crawler.DTO.ResponseDTO;
using ServiceStack.ServiceClient.Web;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;

namespace Crawler.API.ServiceCode
{
    public partial class CrawlerService : ServiceBase
    {
        /// <summary>
        /// SnapshotToContent를 For_SnapshotId, Has_ContentId, Seqno 통해서 Create 하는 함수
        /// </summary>
        /// <param name="req">
        /// For_SnapshotId
        /// </param>
        /// <param name="req">
        /// Has_ContentId
        /// </param>
        /// <param name="req">
        /// Seqno
        /// </param>
        /// <returns></returns>
        public EnvelopeDTO<GenericDummyDTO> Any(SnapshotToContentCreateRequestDTO req)
        {
            var For_SnapshotId = req.For_SnapshotId;
            var Has_contentid = req.Has_ContentId;
            var Seqno = req.Seqno;
            
            if(!For_SnapshotId.HasValue && Has_contentid.HasValue && Seqno.HasValue)
            {
                return Fail<GenericDummyDTO>("SnapshotToContentCreateRequestDTO : parameter 'For_SnapshotId' is empty.");
            }
            if (For_SnapshotId.HasValue && !Has_contentid.HasValue && Seqno.HasValue)
            {
                return Fail<GenericDummyDTO>("SnapshotToContentCreateRequestDTO : parameter 'Has_contentid' is empty.");
            }
            if (For_SnapshotId.HasValue && Has_contentid.HasValue && !Seqno.HasValue)
            {
                return Fail<GenericDummyDTO>("SnapshotToContentCreateRequestDTO : parameter 'Seqno' is empty.");
            }
            if (!For_SnapshotId.HasValue && !Has_contentid.HasValue && Seqno.HasValue)
            {
                return Fail<GenericDummyDTO>("SnapshotToContentCreateRequestDTO : parameter 'For_SnapshotId' && 'Has_contentid' are empty.");
            }
            if (!For_SnapshotId.HasValue && Has_contentid.HasValue && !Seqno.HasValue)
            {
                return Fail<GenericDummyDTO>("SnapshotToContentCreateRequestDTO : parameter 'For_SnapshotId' && 'Seqno' are empty.");
            }
            if (For_SnapshotId.HasValue && !Has_contentid.HasValue && !Seqno.HasValue)
            {
                return Fail<GenericDummyDTO>("SnapshotToContentCreateRequestDTO : parameter 'Has_contentid' && 'Seqno' are empty.");
            }
            if (!For_SnapshotId.HasValue && !Has_contentid.HasValue && !Seqno.HasValue)
            {
                return Fail<GenericDummyDTO>("SnapshotToContentCreateRequestDTO : parameter 'For_SnapshotId' && 'Has_contentid' && 'Seqno' are empty.");
            }
            else
            {
                using (var entities = new CrawlerStorage())
                {
                    try
                    {
                        var snapshotTocontent = new SnapshotToContent();

                        snapshotTocontent.For_SnapshotId = For_SnapshotId.Value;
                        snapshotTocontent.Has_ContentId = Has_contentid.Value;
                        snapshotTocontent.Seqno = Seqno.Value;

                        entities.SnapshotToContents.Add(snapshotTocontent);

                        entities.SaveChanges();

                        return Succeeded(new GenericDummyDTO());
                    }
                    catch (Exception e)
                    {
                        return Fail<GenericDummyDTO>("e");
                    }
                }
            }
        }

        /// <summary>
        /// SnapshotToContentDTO를 For_SnapshotId, Has_ContentId를 통해서 가져오는 함수
        /// </summary>
        /// <param name="req">
        /// For_SnapshotId 
        /// </param>
        /// <param name="req">
        /// Has_ContentId
        /// </param>
        /// <returns></returns>
        public EnvelopeDTO<SnapshotToContentDTO> Any(SnapshotToContentGetbyIdRequestDTO req)
        {
            var For_SnapshotId = req.For_SnapshotId;
            var Has_ContentId = req.Has_ContentId;

            if (!For_SnapshotId.HasValue && Has_ContentId.HasValue)
            {
                return Fail<SnapshotToContentDTO>("SnapshotToContentGetbyIdRequestDTO : parameter 'For_SnapshotId' is empty.");
            }
            if (For_SnapshotId.HasValue && !Has_ContentId.HasValue)
            {
                return Fail<SnapshotToContentDTO>("SnapshotToContentGetbyIdRequestDTO : parameter 'Has_ContentId' is empty.");
            }
            if (!For_SnapshotId.HasValue && !Has_ContentId.HasValue)
            {
                return Fail<SnapshotToContentDTO>("SnapshotToContentGetbyIdRequestDTO : parameter 'For_SnapshotId' && 'Has_ContentId' are empty.");
            }
            else
            {
                using (var entities = new CrawlerStorage())
                {
                    try
                    {
                        var snapshotTocontent = (from s in entities.SnapshotToContents.AsNoTracking()
                                                 where s.For_SnapshotId == For_SnapshotId && s.Has_ContentId == Has_ContentId
                                                 select new SnapshotToContentDTO
                                                 {
                                                     For_SnapshotId = s.For_SnapshotId,
                                                     Has_ContentId = s.Has_ContentId,
                                                     Seqno = s.Seqno
                                                 }).SingleOrDefault();

                        if (snapshotTocontent == null)
                        {
                            return Fail<SnapshotToContentDTO>("SnapshotToContentGetbyIdRequestDTO : SnapshotToContent matching given 'snapshotTocontent' does not exist.");
                        }

                        return Succeeded(snapshotTocontent);
                    }

                    catch (Exception e)
                    {
                        return Fail<SnapshotToContentDTO>("SnapshotToContentGetbyIdRequestDTO : Exception - " + e.Message);
                    }
                }
            }
        }
    }
}